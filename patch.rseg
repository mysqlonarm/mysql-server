diff --git a/storage/innobase/trx/trx0trx.cc b/storage/innobase/trx/trx0trx.cc
index eb7bf180293..8ed2b237d13 100644
--- a/storage/innobase/trx/trx0trx.cc
+++ b/storage/innobase/trx/trx0trx.cc
@@ -1049,13 +1049,13 @@ static trx_rseg_t *get_next_redo_rseg_from_undo_spaces() {
   less than rsegs->size(). */
   ulint target_rollback_segments = srv_rollback_segments;
 
-  static ulint rseg_counter = 0;
+  static std::atomic<ulint> rseg_counter{0};
   trx_rseg_t *rseg = nullptr;
   ulint current = rseg_counter;
 
   /* Increment the static redo_rseg_slot so the next call from any thread
   starts with the next rseg. */
-  os_atomic_increment_ulint(&rseg_counter, 1);
+  rseg_counter.fetch_add(1, std::memory_order_relaxed);
 
   while (rseg == nullptr) {
     /* Traverse the rsegs like this: (space, rseg_id)
@@ -1100,7 +1100,7 @@ static trx_rseg_t *get_next_redo_rseg_from_undo_spaces() {
 The assigned slots may have gaps but the vector does not.
 @return assigned rollback segment instance */
 static trx_rseg_t *get_next_redo_rseg_from_trx_sys() {
-  static ulint rseg_counter = 0;
+  static std::atomic<ulint> rseg_counter{0};
   ulong n_rollback_segments = srv_rollback_segments;
 
   /* Versions 5.6 and 5.7 of InnoDB would allow 128 as the max for
@@ -1118,8 +1118,8 @@ static trx_rseg_t *get_next_redo_rseg_from_trx_sys() {
   ut_ad(n_rollback_segments <= trx_sys->rsegs.size());
 
   /* Try the next slot that no other thread is looking at */
-  ulint slot =
-      os_atomic_increment_ulint(&rseg_counter, 1) % n_rollback_segments;
+  ulint slot = rseg_counter.fetch_add(1, std::memory_order_relaxed) %
+               n_rollback_segments;
 
   /* s_lock the vector since it might be sorted when added to. */
   trx_sys->rsegs.s_lock();
@@ -1149,14 +1149,14 @@ static trx_rseg_t *get_next_redo_rseg() {
 /** Get the next noredo rollback segment.
 @return assigned rollback segment instance */
 static trx_rseg_t *get_next_temp_rseg() {
-  static ulint temp_rseg_counter = 0;
+  static std::atomic<ulint> temp_rseg_counter{0};
   ulong n_rollback_segments = srv_rollback_segments;
 
   ut_ad(n_rollback_segments <= trx_sys->tmp_rsegs.size());
 
   /* Try the next slot that no other thread is looking at */
-  ulint slot =
-      os_atomic_increment_ulint(&temp_rseg_counter, 1) % n_rollback_segments;
+  ulint slot = temp_rseg_counter.fetch_add(1, std::memory_order_relaxed) %
+               n_rollback_segments;
 
   /* No need to s_lock the vector since it is only added to at the end,
   and it is never resized or sorted. */
